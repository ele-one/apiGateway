worker_processes 1;

events { worker_connections 1024; }

http {

    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Host $server_name;


    sendfile on;

    upstream brown_gateway {
        server gateway:9000;
    }


    upstream brown_crud {
        server crud:5001;
    }


    upstream brown_search {
        server search:5002;
    }


    upstream brown_email {
        server email:5004;
    }

    server {
        listen 7777            ssl;
        #keepalive_timeout     70;

        ssl_certificate       /etc/nginx/ssl/ele-one-brown.com.crt;
        ssl_certificate_key   /etc/nginx/ssl/ele-one-brown.com.key;
        ssl_protocols         TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers           HIGH:!aNULL:!MD5;
        #ssl_session_cache     shared:SSL:10m;
        #ssl_session_timeout   10m;


        location / {
            proxy_pass         http://brown_gateway;
            proxy_redirect     off;
        }


        location /crud/ {
            proxy_pass         http://brown_crud/;
            proxy_redirect     off;

        }


        location /search/ {
            proxy_pass         http://brown_search/;
            proxy_redirect     off;

        }

        location /email/ {
            proxy_pass         http://brown_email/;
            proxy_redirect     off;

        }

        location /readioc {
            proxy_pass         http://brown_crud/readioc/;
            proxy_redirect     off;
        }


        location /createioc {
            proxy_pass         http://brown_crud/createioc/;
            proxy_redirect     off;
        }


        location /deleteioc {
            proxy_pass         http://brown_crud/deleteioc/;
            proxy_redirect     off;
        }


        location /updateioc {
            proxy_pass         http://brown_crud/updateioc/;
            proxy_redirect     off;
        }


        location /getLogtypes {
           proxy_pass           http://brown_search/getLogtypes/;
           proxy_redirect       off;
        }


        location ~ ^/getCaseDirs/(?<logtype>.*) {
            proxy_pass          http://brown_search/getCaseDirs/$logtype/;
            proxy_redirect      off;
        }


        location ~ ^/getCaseDirs/(?<logtype>.*)/(?<casedir>.*) {
            proxy_pass          http://brown_search/getCaseDirs/$logtype/$casedir/;
            proxy_redirect      off;
        }


        location /searchioc {
            proxy_pass         http://brown_search/searchioc/;
            proxy_redirect     off;

        }


        location /getAllCases {
            proxy_pass         http://brown_crud/getAllCases/;
            proxy_redirect     off;
        }

        location /getCaseVersions {
            proxy_pass         http://brown_crud/getCaseVersions/;
            proxy_redirect     off;
        }

        location /publishNotification {
            proxy_pass         http://brown_email/publishNotification/;
            proxy_redirect     off;
        }

        location /saveSubscriber {
            proxy_pass         http://brown_gateway/saveSubscriber/;
            proxy_redirect     off;
        }

    }
}



#### Notes #####

# step 1 - include this file in the main nginx file - /usr/local/etc/nginx/nginx.conf (```include servers/*```)
# step 2 - then place this custom nginx-brown.conf file in the /usr/local/etc/nginx/servers/ dir as it is included above.
# cmd to test the config file syntax is all good -> ```nginx -t```
# cmd to start the nginx -> ```nginx (OR sudo nginx IF the server listen port specified in this file is < 1024)```
# NOTE: if the port > 1024, no need to start the nginx as root.
# cmd to stop the nginx process -> ```nginx -s stop```
# cmd to reload the nginx -> ```nginx -s reload  (NOTE, this cmd ONLY works if the nginx is running)```

# The location is macosx, for other OS, the path of nginx and cmd to interact with the service may change

# To inspect network and IPs
# `docker network ls`
# `docker network inspect thesis_front-end`
# `docker exec -it crud-node bash` OR `docker exec -it crud-node bash`
# NOTE for alpine ONLY `docker exec -it nginx-node /bin/sh`
# After logging in: `ip addr`, `ping crud-node`

################

### How to dev-test

# 1- cd to thesis/brown(in future)
# 2- docker-compose down (if running)
# 3- docker-compose up (to build all, if not build)
#
# - docker-compose build nginx (for only one service update)
# - docker-compose up
# - carrot ^ symbol was IMPORTTANT